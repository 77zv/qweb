// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/npprisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "cockroachdb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          String       @default("user")
  accounts      Account[]
  sessions      Session[]
  submissions   Submission[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id               String       @id @default(cuid())
  title            String
  description      String
  fileUrl          String?      @default("google.com") // r2 public string lol, google for now so i can push without breaking
  submissionsOpen  DateTime?
  submissionsClose DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  submissions      Submission[]
}

model Submission {
  fileName    String?
  fileUrl     String   @default("google.com") // r2 public string lol, google for now so i can push without breaking
  submittedAt DateTime @default(now())
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @id
  userName    String
  reviews     Review[]
}

model Review {
  id           String     @id @default(cuid())
  submittedAt  DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [userId], onDelete: Cascade)
  submissionId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  score        Int        @default(0)
  comment      String?
}
